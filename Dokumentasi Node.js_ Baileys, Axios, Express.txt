Panduan Definitif Developer untuk Membangun Aplikasi WhatsApp Node.js dengan Baileys, Express, dan Axios




Bagian I: Konsep Dasar dan Peringatan Kritis




Bab 1: Merancang Arsitektur Stack Bot WhatsApp Modern


Laporan ini menyajikan panduan teknis yang komprehensif untuk membangun aplikasi WhatsApp yang terintegrasi menggunakan serangkaian pustaka (library) Node.js yang kuat. Setiap komponen memiliki peran yang spesifik dan saling melengkapi untuk menciptakan solusi yang fungsional.
* Express.js: Bertindak sebagai "pintu depan" aplikasi, Express adalah kerangka kerja web Node.js yang minimalis dan fleksibel. Perannya adalah untuk menyediakan serangkaian fitur yang tangguh untuk membangun Antarmuka Pemrograman Aplikasi (API) RESTful kita. Express akan menangani semua permintaan HTTP yang masuk dari klien eksternal yang ingin berinteraksi dengan bot secara terprogram.1
* Baileys: Merupakan mesin inti dari aplikasi kita. Baileys adalah pustaka TypeScript/JavaScript yang berinteraksi langsung dengan protokol WebSocket WhatsApp Web. Ini memungkinkan kita untuk mengirim dan menerima pesan secara terprogram tanpa memerlukan browser otomatis.3 Baileys adalah jembatan yang menghubungkan aplikasi kita dengan jaringan WhatsApp.
* Axios: Didefinisikan sebagai alat komunikasi keluar khusus untuk aplikasi kita. Axios adalah klien HTTP berbasis promise yang akan digunakan setiap kali bot kita perlu mengambil data dari atau mengirim data ke API atau layanan eksternal lainnya sebagai respons terhadap suatu peristiwa di WhatsApp.6
* qrcode-terminal: Pustaka ini berfungsi sebagai utilitas dengan tujuan tunggal yang sangat praktis. Fungsinya adalah untuk menampilkan kode QR otentikasi di terminal, memfasilitasi proses login awal untuk bot.9
Arsitektur yang dihasilkan bukanlah sekadar alur linier sederhana. Sebaliknya, ini adalah sistem pemrosesan paralel di mana Express dan Baileys berjalan bersama dalam satu proses Node.js, masing-masing dengan tanggung jawab yang berbeda. Express mengelola dunia HTTP yang sinkron dan berbasis permintaan-respons, berfungsi sebagai pengendali (controller) untuk bot. Sementara itu, Baileys beroperasi di dunia WebSocket yang asinkron dan berbasis peristiwa (event-driven), berfungsi sebagai lapisan layanan (service layer) untuk semua komunikasi WhatsApp.
Struktur ini menciptakan aplikasi dengan dua titik masuk utama: permintaan HTTP ke rute Express dan pesan WebSocket ke klien Baileys. Arsitektur titik masuk ganda ini sangat kuat karena memungkinkan aplikasi untuk menjadi reaktif (merespons pesan WhatsApp yang masuk) dan proaktif (mengirim pesan berdasarkan panggilan API). Memahami pemisahan tanggung jawab ini adalah fundamental untuk merancang bot yang dapat diskalakan dan mudah dipelihara.


Bab 2: Peringatan Kritis Mengenai Penggunaan Baileys


Sebelum melanjutkan, sangat penting untuk memahami sifat dan risiko yang terkait dengan penggunaan Baileys.
Peringatan Penting: Sifat Tidak Resmi Baileys
Baileys bukanlah produk resmi, didukung, atau di-endorse oleh WhatsApp atau perusahaan induknya, Meta.3 Ini adalah proyek yang didorong oleh komunitas yang pada dasarnya merekayasa balik (reverse-engineer) protokol WhatsApp Web.3
Analisis Risiko dan Ketidakstabilan Terkait
* Volatilitas Protokol: Risiko utama adalah WhatsApp dapat memperbarui protokol internalnya kapan saja. Pembaruan semacam itu dapat secara instan membuat Baileys tidak berfungsi sampai pengelola pustaka merilis perbaikan. Hal ini menjadikan pustaka ini secara inheren tidak stabil untuk aplikasi jangka panjang yang bersifat krusial.11
* Risiko Penangguhan Akun: Menggunakan sistem otomatis pada platform WhatsApp standar dapat dianggap sebagai pelanggaran terhadap Ketentuan Layanan mereka. Aktivitas apa pun yang dianggap sebagai spam, pengiriman pesan massal, atau pelecehan dapat menyebabkan nomor telepon yang digunakan diblokir secara permanen.3
* Kurangnya Dukungan Resmi: Semua dukungan bersifat berbasis komunitas (misalnya, melalui Discord atau GitHub Issues). Tidak ada saluran resmi untuk bantuan atau perbaikan bug dari WhatsApp.4
Penggunaan Etis dan Penafian Hukum
Laporan ini menggemakan kembali penafian yang ditemukan dalam dokumentasi pustaka itu sendiri. Pengelola Baileys tidak memaafkan penggunaan aplikasi ini dalam praktik yang melanggar Ketentuan Layanan WhatsApp. Pengguna didorong untuk menggunakan aplikasi ini secara adil dan bertanggung jawab. Gunakan dengan risiko Anda sendiri dan jangan melakukan spam.5
Kombinasi kerangka kerja yang stabil dan berorientasi produksi seperti Express dengan pustaka yang tidak resmi dan volatil seperti Baileys menciptakan sebuah paradoks arsitektural. Hasilnya adalah aplikasi yang dapat diibaratkan sebagai "meriam kaca"—sangat kuat dan fleksibel, tetapi rapuh. Kasus penggunaan yang ideal untuk tumpukan teknologi ini adalah untuk proyek-proyek di mana waktu henti sesekali dapat diterima, seperti proyek pribadi, alat bisnis internal (misalnya, peringatan DevOps), prototipe cepat, atau layanan di mana pengguna menyadari potensi gangguan. Penting untuk membedakan pendekatan ini dari API Bisnis WhatsApp (WABA) resmi, yang menawarkan jalur integrasi yang sama sekali berbeda dengan kemampuan, aturan, dan biaya yang berbeda. Baileys terhubung ke akun aplikasi WhatsApp personal atau bisnis standar, bukan ke platform WABA.3


Bagian II: Gerbang WhatsApp: Menyelami Baileys Secara Mendalam




Bab 3: Instalasi dan Koneksi Awal


Untuk memulai, pastikan lingkungan pengembangan Anda memenuhi prasyarat yang diperlukan.
Prasyarat
Baileys memerlukan Node.js versi 17 atau lebih tinggi agar dapat berfungsi. Namun, untuk kompatibilitas dan kinerja terbaik, direkomendasikan untuk menggunakan Node.js versi 18.19.0 atau yang lebih baru.3
Instalasi
Instal paket @whiskeysockets/baileys, yang merupakan paket utama yang dikelola oleh komunitas, menggunakan manajer paket pilihan Anda (npm, yarn, atau pnpm):


Bash




npm install @whiskeysockets/baileys

4
Fungsi makeWASocket
Fungsi makeWASocket adalah ekspor utama dari pustaka ini dan merupakan titik masuk untuk membuat koneksi ke WhatsApp.3 Fungsi ini menerima objek konfigurasi yang memungkinkan Anda menyesuaikan perilaku klien soket.
Konfigurasi Soket
Objek konfigurasi makeWASocket adalah panel kontrol untuk seluruh klien Baileys. Tabel berikut merinci beberapa opsi konfigurasi yang paling penting.


Opsi
	Tipe
	Deskripsi
	Contoh
	Sumber
	auth
	AuthenticationState
	Objek status otentikasi untuk sesi. Penting untuk persistensi.
	{ creds, keys }
	4
	printQRInTerminal
	boolean
	Menampilkan kode QR di terminal. Atur ke false jika menggunakan kode pemasangan atau penangan QR kustom.
	true
	10
	logger
	P.Logger
	Instans logger Pino untuk output debugging yang detail.
	P({ level: 'debug' })
	11
	browser
	Browsers.Browser
	Meniru browser/OS tertentu. Menggunakan nilai desktop dapat memungkinkan sinkronisasi riwayat yang lebih banyak.
	Browsers.macOS('Desktop')
	13
	syncFullHistory
	boolean
	Digunakan dengan konfigurasi browser desktop untuk mencoba sinkronisasi riwayat obrolan penuh.
	true
	13
	getMessage
	(key) => Promise<any>
	Fungsi untuk mengambil pesan dari penyimpanan kustom. Meningkatkan keandalan pengiriman ulang pesan.
	async (key) => store.getMessage(key)
	4
	markOnlineOnConnect
	boolean
	Jika false, mencegah bot muncul "online" dan memungkinkan telepon utama menerima notifikasi.
	false
	4
	

Bab 4: Otentikasi dan Sesi Persisten


Aplikasi harus diautentikasi sebagai "Perangkat Tertaut" (Linked Device) untuk dapat terhubung ke WhatsApp.3 Terdapat dua metode utama untuk melakukan ini.
Metode 1: Otentikasi Kode QR
Metode klasik ini melibatkan pemindaian kode QR yang dihasilkan oleh pustaka.10 Ini dapat dicapai dengan mudah dengan mengatur opsi
printQRInTerminal: true dalam konfigurasi soket. Pustaka qrcode-terminal adalah dependensi yang memfasilitasi rendering kode QR ini langsung di konsol Anda.9
Metode 2: Kode Pemasangan Nomor Telepon (Pairing Code)
Ini adalah alternatif yang lebih modern dan ramah untuk lingkungan headless (tanpa antarmuka grafis).4 Metode ini tidak memerlukan pemindaian visual. Sebaliknya, Anda meminta kode unik untuk nomor telepon Anda, yang kemudian Anda masukkan di perangkat utama Anda di bawah "Perangkat Tertaut".


JavaScript




// Di dalam fungsi koneksi Anda
if (!sock.authState.creds.registered) {
   const phoneNumber = 'NOMOR_TELEPON_ANDA'; // Ganti dengan nomor telepon target
   const code = await sock.requestPairingCode(phoneNumber);
   console.log(`Kode Pemasangan Anda: ${code}`);
}

Persistensi Sesi: Inti yang Tidak Dapat Ditawar
Menyimpan sesi otentikasi bukanlah hal yang opsional untuk aplikasi nyata mana pun. Tanpa persistensi, Anda harus memindai ulang kode QR atau memasukkan kode pemasangan setiap kali aplikasi dimulai ulang. Baileys menyediakan solusi siap pakai bernama useMultiFileAuthState untuk menangani ini.4 Utilitas ini menyimpan kredensial ke dalam serangkaian file di direktori yang ditentukan.
Pola koneksi standar yang harus diikuti adalah memuat status sebelum membuat koneksi dan menyimpannya setiap kali ada pembaruan.


JavaScript




import makeWASocket, { useMultiFileAuthState } from '@whiskeysockets/baileys';

async function connectToWhatsApp() {
   const { state, saveCreds } = await useMultiFileAuthState('auth_info_baileys');
   const sock = makeWASocket({
       auth: state,
       printQRInTerminal: true,
   });

   // Simpan kredensial setiap kali diperbarui
   sock.ev.on('creds.update', saveCreds);

   //... sisa logika koneksi
}

4
Meskipun useMultiFileAuthState sangat baik untuk memulai dan untuk proyek demo, dokumentasi resmi memperingatkan bahwa ini tidak efisien untuk penggunaan produksi karena seringnya operasi I/O file.3 Setiap pembaruan kredensial, yang terjadi cukup sering (misalnya, setiap kali pesan dikirim atau diterima), memicu penulisan ke file.4 Untuk aplikasi skala produksi, terutama yang berjalan di lingkungan terkontainerisasi dengan sistem file sementara, pendekatan yang lebih kuat diperlukan. Praktik terbaik adalah mengimplementasikan penangan status otentikasi kustom yang menggunakan basis data yang lebih andal seperti Redis (untuk kecepatan) atau PostgreSQL/MySQL (untuk persistensi terstruktur), mengambil inspirasi dari proyek seperti
baileys-api yang menggunakan Prisma.12


Bab 5: Menguasai Arsitektur Berbasis Peristiwa (Event-Driven)


Semua interaksi dengan soket WhatsApp bersifat asinkron dan ditangani dengan mendengarkan peristiwa (events) pada objek sock.ev, yang merupakan sebuah EventEmitter.3 Memahami peristiwa-peristiwa inti ini sangat penting untuk membangun bot yang andal.
Peristiwa Siklus Hidup Inti (Core Lifecycle Events)
* connection.update: Peristiwa ini dipicu setiap kali status koneksi berubah. Payload-nya berisi objek { connection, lastDisconnect, qr }. Logika standar adalah memeriksa lastDisconnect.error untuk memastikan penyebab pemutusan bukan karena DisconnectReason.loggedOut sebelum mencoba menyambung kembali secara otomatis.11
* creds.update: Seperti yang dibahas sebelumnya, peristiwa ini adalah pemicu untuk menyimpan status sesi yang diperbarui menggunakan fungsi saveCreds dari useMultiFileAuthState.4
Peristiwa Pesan dan Data
* messages.upsert: Ini adalah peristiwa utama untuk menangani pesan baru yang masuk. Payload-nya adalah objek { messages, type }, di mana messages adalah sebuah array yang dapat berisi beberapa objek pesan.4
* messages.update: Digunakan untuk menangani pembaruan pada pesan yang sudah ada, seperti pengeditan atau suara pada polling.4
* groups.update: Untuk bereaksi terhadap perubahan metadata grup, seperti judul baru atau deskripsi yang diperbarui.4
Tabel berikut memberikan referensi cepat untuk peristiwa-peristiwa Baileys yang paling umum.


Nama Peristiwa
	Deskripsi Payload
	Kasus Penggunaan Umum
	Sumber
	connection.update
	{ connection, lastDisconnect, qr }
	Mengelola status koneksi, menangani penyambungan kembali, menampilkan kode QR.
	11
	creds.update
	Partial<AuthenticationCreds>
	Menyimpan sesi yang diperbarui ke penyimpanan persisten.
	4
	messages.upsert
	{ messages: proto.IWebMessageInfo, type }
	Memproses pesan masuk baru. Jantung dari logika bot.
	4
	messages.update
	{ key: proto.IMessageKey, update: Partial<any> }
	Menangani pengeditan pesan, pembaruan polling, atau reaksi.
	4
	groups.update
	{ id: string,... }
	Bereaksi terhadap perubahan metadata grup (misalnya, perubahan judul).
	4
	group-participants.update
	{ id, participants, action }
	Bereaksi terhadap pengguna yang bergabung, keluar, dipromosikan, atau diturunkan pangkatnya di grup.
	13
	

Bab 6: Panduan Komprehensif untuk Mengirim Pesan


Fungsi utama untuk mengirim pesan di Baileys adalah sock.sendMessage(jid, content, options).14
Membedah JID (WhatsApp ID)
JID adalah pengidentifikasi unik untuk setiap entitas di WhatsApp. Formatnya bervariasi tergantung pada jenis entitas:
* Pengguna (User): [kode negara][nomor telepon]@s.whatsapp.net. Contoh: 6281234567890@s.whatsapp.net.4
* Grup (Group): [id grup]@g.us. Contoh: 123456789-123345@g.us.4
* Daftar Siaran (Broadcast List): [timestamp pembuatan]@broadcast.4
* Status/Story: status@broadcast.4
Buku Resep Jenis Pesan
Berikut adalah contoh kode praktis untuk mengirim berbagai jenis pesan.
* Pesan Teks dan Balasan Kutipan (Quoted Replies)
JavaScript
// Mengirim pesan teks sederhana
await sock.sendMessage('628123...@s.whatsapp.net', { text: 'Halo Dunia!' });

// Mengirim balasan yang mengutip pesan sebelumnya (objek `msg` berasal dari event 'messages.upsert')
await sock.sendMessage(msg.key.remoteJid, { text: 'Ini adalah balasan.' }, { quoted: msg });

10
* Media (Gambar, Video, Audio)
JavaScript
import fs from 'fs';

// Mengirim gambar dari file lokal dengan keterangan
await sock.sendMessage(jid, { 
   image: { url: './path/to/image.png' },
   caption: 'Lihat gambar ini!'
});
[10, 14]

// Mengirim video dari file lokal, bisa sebagai video biasa atau "video note" (PTT video)
await sock.sendMessage(jid, {
   video: fs.readFileSync('./path/to/video.mp4'),
   caption: 'Ini videonya',
   ptv: true // Atur ke true untuk mengirim sebagai video note
});
[14]

* Dokumen
JavaScript
await sock.sendMessage(jid, {
   document: { url: './path/to/document.pdf' },
   mimetype: 'application/pdf',
   fileName: 'Laporan.pdf'
});

15
* Tombol (Buttons)
Peringatan: Fitur tombol dianggap usang (deprecated) dan mungkin tidak berfungsi dengan andal atau dapat dihapus di versi WhatsApp mendatang.10
JavaScript
const buttons =;
const buttonMessage = {
   text: "Pilih salah satu:",
   footer: 'Footer teks',
   buttons: buttons,
   headerType: 1
};
await sock.sendMessage(jid, buttonMessage);

14
* Polling
JavaScript
const poll = {
   name: 'Polling Apa Makanan Favoritmu?',
   values:,
   selectableCount: 1
};
await sock.sendMessage(jid, { poll });

14
* Lokasi dan Kontak vCard
JavaScript
// Mengirim lokasi
await sock.sendMessage(jid, { location: { degreesLatitude: -6.2088, degreesLongitude: 106.8456 } });

// Mengirim kontak
const vcard = 'BEGIN:VCARD\n' +
             'VERSION:3.0\n' +
             'FN:Nama Kontak\n' +
             'ORG:Organisasi;\n' +
             'TEL;type=CELL;type=VOICE;waid=6281234567890:+62 812-3456-7890\n' +
             'END:VCARD';
await sock.sendMessage(jid, { contacts: { displayName: 'Nama Kontak', contacts: [{ vcard }] } });

14
* Pratinjau Tautan (Link Previews)
Untuk mengaktifkan fitur ini, Anda perlu menginstal dependensi tambahan: npm install link-preview-js. Baileys akan secara otomatis menggunakannya untuk menghasilkan pratinjau tautan yang kaya ketika Anda mengirim pesan yang berisi URL.4


Bab 7: Menerima dan Menafsirkan Pesan


Anatomi Pesan Masuk (proto.IWebMessageInfo)
Objek pesan yang diterima dalam peristiwa messages.upsert memiliki struktur yang kompleks. Berikut adalah bagian-bagian utamanya:
   * m.key: Objek ini berisi metadata kunci tentang pesan.
   * remoteJid: ID pengirim atau grup.11
   * fromMe: Sebuah boolean yang bernilai true jika pesan dikirim oleh bot itu sendiri.10
   * id: ID unik dari pesan tersebut.18
   * m.message: Ini adalah payload konten utama. Ini adalah objek besar di mana hanya satu properti yang akan ada, sesuai dengan jenis pesan (misalnya, conversation untuk teks, imageMessage untuk gambar, videoMessage untuk video).11
Pemrograman Defensif: Penangan Pesan
Peristiwa messages.upsert dapat dipicu oleh aktivitas yang bukan pesan yang dibuat oleh pengguna, seperti tanda terima status atau pembaruan lainnya. Peristiwa ini mungkin memiliki key tetapi tidak memiliki payload message. Oleh karena itu, sangat penting untuk selalu memeriksa keberadaan m.message sebelum mencoba mengakses kontennya untuk menghindari kesalahan TypeError.


JavaScript




sock.ev.on('messages.upsert', async ({ messages }) => {
   for (const msg of messages) {
       // Pola defensif yang krusial: abaikan jika tidak ada konten pesan
       if (!msg.message) {
           continue; // Lanjutkan ke iterasi berikutnya
       }

       console.log('Pesan baru diterima:', JSON.stringify(msg, undefined, 2));

       // Contoh logika untuk merespons pesan teks
       if (msg.message.conversation) {
           const sender = msg.key.remoteJid;
           const text = msg.message.conversation.toLowerCase();
           
           if (text === 'ping') {
               await sock.sendMessage(sender, { text: 'pong' });
           }
       }
   }
});

10


Pola ini mengubah sumber bug yang umum menjadi momen pembelajaran tentang kompleksitas protokol WhatsApp.


Bab 8: Operasi Obrolan dan Grup Tingkat Lanjut


Selain mengirim dan menerima pesan, Baileys menyediakan fungsi untuk mengelola obrolan dan grup secara terprogram.
Manajemen Obrolan
Anda dapat melakukan berbagai tindakan pada obrolan individu:
   * Mengarsipkan Obrolan: await sock.chatModify({ archive: true }, 'jid@s.whatsapp.net').13
   * Membisukan/Membunyikan Obrolan: await sock.chatModify({ mute: 8*60*60*1000 }, jid) untuk membisukan selama 8 jam, atau await sock.chatModify({ mute: null }, jid) untuk membunyikan kembali.13
   * Menandai sebagai Dibaca/Belum Dibaca: await sock.chatModify({ markRead: false }, jid).13
   * Menyematkan/Melepas Sematan Obrolan: await sock.chatModify({ pin: true }, jid).13
   * Menghapus Obrolan: await sock.chatModify({ delete: true }, jid).13
Administrasi Grup
Baileys menawarkan kontrol penuh atas administrasi grup:
   * Membuat Grup: const group = await sock.groupCreate("Nama Grup Baru", ["jid1@s.whatsapp.net", "jid2@s.whatsapp.net"]).13
   * Mengelola Peserta: await sock.groupParticipantsUpdate(groupId, ["jid@s.whatsapp.net"], "add"). Aksi bisa berupa "add", "remove", "promote", atau "demote".13
   * Memperbarui Metadata Grup:
   * Subjek/Judul: await sock.groupUpdateSubject(groupId, "Judul Grup Baru").13
   * Deskripsi: await sock.groupUpdateDescription(groupId, "Deskripsi baru untuk grup.").13
   * Mengelola Pengaturan Grup:
   * Hanya admin yang bisa mengirim pesan: await sock.groupSettingUpdate(groupId, 'announcement').13
   * Semua orang bisa mengirim pesan: await sock.groupSettingUpdate(groupId, 'not_announcement').13
   * Meninggalkan Grup: await sock.groupLeave(groupId).13
   * Mengelola Kode Undangan: const code = await sock.groupInviteCode(groupId) dan await sock.groupRevokeInvite(groupId).13


Bagian III: Tulang Punggung API: Menyelami Express.js Secara Mendalam




Bab 9: Dasar-dasar Express.js


Instalasi dan Pengaturan
Mulailah dengan menginstal Express ke dalam proyek Anda:


Bash




npm install express

2
Berikut adalah contoh kanonis dari server "Hello World" di Express. Kode ini memulai server dan mendengarkan koneksi di port 3000. Aplikasi merespons dengan "Hello World!" untuk permintaan ke URL root (/).2


JavaScript




const express = require('express');
const app = express();
const port = 3000;

// Menangani permintaan GET ke rute root ('/')
app.get('/', (req, res) => {
 res.send('Hello World!');
});

// Memulai server dan mendengarkan di port yang ditentukan
app.listen(port, () => {
 console.log(`Aplikasi contoh berjalan di http://localhost:${port}`);
});

22
Siklus Permintaan-Respons (Request-Response Cycle)
Ini adalah konsep fundamental di Express. Ketika permintaan HTTP tiba, Express melewatkannya melalui serangkaian fungsi yang disebut middleware ke penangan rute (route handler). Penangan rute kemudian menggunakan objek respons (res) untuk mengirim balasan kembali ke klien, sehingga menyelesaikan siklus tersebut.2


Bab 10: Perutean Tingkat Lanjut


Metode dan Jalur Rute
Express memungkinkan Anda untuk mendefinisikan rute untuk semua kata kerja HTTP utama (app.get(), app.post(), dll.). Jalur rute dapat berupa string, pola string, atau bahkan ekspresi reguler untuk pencocokan yang kompleks.2
Mengekstrak Data dari Permintaan
   * Parameter Rute (req.params): Anda dapat menangkap segmen URL yang dinamis. Misalnya, dalam rute /users/:userId, nilai untuk :userId akan tersedia di req.params.userId.2
   * Query String (req.query): Parameter setelah ? di URL (misalnya, /search?term=node) dapat diakses melalui objek req.query. Dalam contoh ini, req.query.term akan berisi "node".2
Aplikasi Modular dengan express.Router
Untuk aplikasi yang lebih besar, sangat disarankan untuk menggunakan express.Router untuk menjaga kebersihan dan skalabilitas kode. Ini memungkinkan Anda untuk mengelompokkan penangan rute terkait ke dalam file terpisah dan kemudian "memasangnya" (mount) di aplikasi utama Anda pada jalur tertentu.1


JavaScript




// Di file routes/bot.js
const express = require('express');
const router = express.Router();

router.post('/send', (req, res) => {
   // Logika untuk mengirim pesan
   res.send('Pesan sedang dikirim...');
});

module.exports = router;

// Di file app.js utama
const botRouter = require('./routes/bot');
app.use('/bot', botRouter); // Semua rute di bot.js akan diawali dengan /bot



Bab 11: Kekuatan Middleware


Middleware adalah fungsi yang memiliki akses ke objek permintaan (req), objek respons (res), dan fungsi next dalam siklus permintaan-respons aplikasi. Fungsi next sangat penting; ia meneruskan kontrol ke middleware berikutnya dalam rantai.2
Middleware Bawaan
Express dilengkapi dengan beberapa middleware yang sangat berguna:
   * express.json(): Middleware ini mem-parsing payload JSON yang masuk dan membuatnya tersedia di req.body. Ini sangat penting untuk API yang menerima data JSON.28
   * express.urlencoded(): Mirip dengan express.json(), tetapi untuk mem-parsing payload yang di-encode sebagai URL (misalnya, dari pengiriman formulir HTML).
   * express.static(): Digunakan untuk menyajikan file statis seperti HTML, CSS, dan JavaScript sisi klien dari direktori tertentu.28
Middleware Kustom
Anda dapat dengan mudah menulis middleware Anda sendiri untuk tugas-tugas seperti logging, validasi, atau otentikasi.


JavaScript




// Middleware untuk mencatat setiap permintaan
const requestLogger = (req, res, next) => {
   console.log(` ${req.method} ${req.url}`);
   next(); // Wajib untuk meneruskan ke handler berikutnya
};

// Middleware untuk otentikasi API Key sederhana
const apiKeyAuth = (req, res, next) => {
   const apiKey = req.headers['x-api-key'];
   if (apiKey && apiKey === 'KUNCI_RAHASIA_ANDA') {
       next();
   } else {
       res.status(401).send('Unauthorized');
   }
};

app.use(requestLogger);
app.use('/api', apiKeyAuth); // Terapkan middleware otentikasi hanya untuk rute /api



Bab 12: Mengelola Objek Permintaan dan Respons


Objek req dan res adalah inti dari setiap aplikasi Express.
Referensi Cepat Objek req
Objek req mewakili permintaan HTTP yang masuk dan memiliki properti untuk string kueri permintaan, parameter, badan, header HTTP, dan banyak lagi.


Properti/Metode
	Deskripsi
	Sumber
	req.body
	Berisi data yang dikirimkan dalam badan permintaan. Memerlukan middleware seperti express.json().
	2
	req.params
	Objek yang berisi parameter rute bernama dari jalur URL.
	2
	req.query
	Objek yang berisi parameter query string dari URL.
	2
	req.headers
	Objek yang berisi header permintaan HTTP mentah.
	2
	req.method
	String yang berisi metode permintaan HTTP (misalnya, 'GET', 'POST').
	2
	req.ip
	Berisi alamat IP jarak jauh dari permintaan tersebut.
	2
	Referensi Cepat Objek res
Objek res mewakili respons HTTP yang dikirim oleh aplikasi Express saat menerima permintaan.


Metode
	Deskripsi
	Sumber
	res.send()
	Mengirim respons HTTP. Dapat menangani string, Buffer, objek, dan array.
	2
	res.json()
	Mengirim respons JSON, secara otomatis mengatur header Content-Type.
	2
	res.status()
	Mengatur kode status HTTP untuk respons. Metode ini dapat dirangkai (chainable).
	2
	res.sendStatus()
	Mengatur kode status dan mengirim representasi stringnya sebagai badan respons.
	2
	res.redirect()
	Mengalihkan permintaan ke URL yang berbeda.
	2
	res.download()
	Mendorong klien untuk mengunduh file.
	2
	

Bagian IV: Klien HTTP: Menyelami Axios Secara Mendalam




Bab 13: Konsep Inti dan Eksekusi Permintaan


Instalasi dan Pengenalan
Instal Axios ke dalam proyek Anda:


Bash




npm install axios

6


Axios adalah klien HTTP berbasis promise yang serbaguna, mampu berjalan baik di lingkungan Node.js maupun di browser.6
Buku Resep Metode HTTP
Berikut adalah contoh untuk setiap metode HTTP utama, menunjukkan pola async/await yang modern dan pola .then() berbasis promise tradisional.
   * GET (Mengambil Data)
JavaScript
// Menggunakan async/await
async function getUser(userId) {
   try {
       const response = await axios.get(`https://api.example.com/users/${userId}`);
       console.log(response.data);
   } catch (error) {
       console.error(error);
   }
}

// Menggunakan.then() dengan parameter
axios.get('/users', { params: { status: 'active' } })
  .then(response => {
       console.log(response.data);
   })
  .catch(error => {
       console.error('Error fetching users:', error);
   });

30
   * POST (Mengirim Data Baru)
JavaScript
const newUser = { name: 'John Doe', email: 'john.doe@example.com' };
axios.post('https://api.example.com/users', newUser)
  .then(response => {
       console.log('User created:', response.data);
   })
  .catch(error => {
       console.error('Error creating user:', error);
   });

7
   * PUT (Memperbarui Data yang Ada)
JavaScript
const updatedData = { name: 'Jane Doe', email: 'jane.doe@example.com' };
axios.put('https://api.example.com/users/123', updatedData)
  .then(response => {
       console.log('User updated:', response.data);
   })
  .catch(error => {
       console.error('Error updating user:', error);
   });

37
   * DELETE (Menghapus Sumber Daya)
Permintaan DELETE dengan badan (body) memerlukan sintaks khusus di mana badan harus ditempatkan di dalam properti data dari objek konfigurasi.
JavaScript
axios.delete('https://api.example.com/users/123')
  .then(response => {
       console.log('User deleted successfully');
   })
  .catch(error => {
       console.error('Error deleting user:', error);
   });

// DELETE dengan body (jika API mendukungnya)
axios.delete('https://api.example.com/items', {
   headers: { 'Authorization': 'Bearer token' },
   data: { source: 'item-id-to-delete' }
});

42


Bab 14: Konfigurasi Lanjutan dan Penanganan Kesalahan


Kekuatan Objek config
Objek config opsional di Axios memungkinkan kontrol yang sangat detail atas permintaan, seperti mengatur header, timeout, dan lainnya.7
Praktik Terbaik: axios.create()
Untuk API yang sering Anda gunakan, praktik terbaik adalah membuat instans Axios yang telah dikonfigurasi sebelumnya. Ini mempromosikan kode yang bersih dan dapat digunakan kembali.8


JavaScript




const apiClient = axios.create({
   baseURL: 'https://api.example.com',
   timeout: 5000, // 5 detik
   headers: { 'X-Custom-Header': 'foobar' }
});

// Sekarang gunakan apiClient alih-alih axios
apiClient.get('/users');

Penanganan Kesalahan Komprehensif
Sangat penting untuk menangani kesalahan dengan benar. Objek kesalahan Axios menyediakan konteks terperinci.


JavaScript




apiClient.get('/non-existent-endpoint')
  .catch(error => {
       if (error.response) {
           // Permintaan dibuat dan server merespons dengan kode status
           // yang berada di luar rentang 2xx
           console.log('Data Error:', error.response.data);
           console.log('Status Error:', error.response.status);
       } else if (error.request) {
           // Permintaan dibuat tetapi tidak ada respons yang diterima
           console.log('Request Error:', error.request);
       } else {
           // Sesuatu terjadi dalam menyiapkan permintaan yang memicu Kesalahan
           console.log('Error:', error.message);
       }
   });

7
Referensi Cepat Objek config Axios
Tabel ini berfungsi sebagai panduan referensi cepat untuk properti yang paling umum digunakan dalam objek config Axios.


Opsi
	Tipe
	Deskripsi
	Sumber
	baseURL
	string
	URL dasar yang ditambahkan di depan semua URL permintaan untuk instans ini.
	7
	headers
	object
	Objek header kustom yang akan dikirim dengan setiap permintaan.
	7
	params
	object
	Parameter URL yang akan ditambahkan ke URL permintaan.
	7
	data
	any
	Badan permintaan, digunakan untuk metode 'POST', 'PUT', 'PATCH', dan 'DELETE'.
	7
	timeout
	number
	Timeout permintaan dalam milidetik sebelum permintaan dibatalkan.
	7
	responseType
	string
	Format yang diharapkan dari data respons (misalnya, 'json', 'stream').
	7
	validateStatus
	function
	Fungsi yang mendefinisikan kode status HTTP mana yang harus menyelesaikan atau menolak promise.
	7
	

Bab 15: Interceptor


Interceptor adalah pengait (hooks) kuat yang dapat secara global memodifikasi permintaan sebelum dikirim atau respons sebelum ditangani oleh .then() atau .catch(). Ini ideal untuk tugas-tugas seperti logging, menyuntikkan token otentikasi, atau mengubah data secara global.6


JavaScript




// Interceptor permintaan untuk menambahkan token otentikasi
apiClient.interceptors.request.use(config => {
   const token = localStorage.getItem('token');
   if (token) {
       config.headers.Authorization = `Bearer ${token}`;
   }
   return config;
}, error => {
   return Promise.reject(error);
});

// Interceptor respons untuk logging global
apiClient.interceptors.response.use(response => {
   // Setiap kode status dalam rentang 2xx akan memicu fungsi ini
   return response;
}, error => {
   // Setiap kode status di luar rentang 2xx akan memicu fungsi ini
   console.error('Terjadi kesalahan API global:', error);
   return Promise.reject(error);
});



Bagian V: Proyek Terintegrasi: Bot WhatsApp RESTful


Bagian terakhir ini akan menyatukan semua pengetahuan sebelumnya ke dalam satu aplikasi yang fungsional dan kohesif.


Bab 16: Perancangan Proyek dan Pengaturan


Struktur Direktori
Struktur proyek yang profesional sangat penting untuk pemeliharaan. Pertimbangkan struktur berikut:






/
├── config/
│   └── index.js       // Variabel lingkungan dan konfigurasi
├── routes/
│   └── api.js         // Rute Express untuk API bot
├── controllers/
│   └── messageController.js // Logika untuk menangani permintaan API
├── services/
│   └── whatsapp.js    // Semua logika Baileys, koneksi, dan penanganan event
└── index.js           // Titik masuk aplikasi, inisialisasi Express

Titik Masuk Aplikasi
File index.js akan menginisialisasi server Express dan memanggil fungsi connectToWhatsApp dari services/whatsapp.js. Kunci dari arsitektur ini adalah bagaimana mengelola instans sock Baileys dan membuatnya dapat diakses oleh bagian lain dari aplikasi. Pendekatan yang umum adalah dengan mengekspor instans sock (atau fungsi yang berinteraksi dengannya) dari modul whatsapp.js.


Bab 17: Membangun Titik Akhir (Endpoint) API


POST /api/message/send
Kita akan membangun rute Express lengkap yang menerima badan JSON seperti { "to": "62812...", "text": "Halo dari API" }. Penangan rute akan memvalidasi input dan meneruskannya ke fungsi controller. Controller kemudian akan menggunakan instans sock Baileys yang dibagikan untuk mengirim pesan, mengembalikan kode status yang bermakna (misalnya, 200 untuk berhasil, 400 untuk input buruk, atau 503 jika bot terputus).
GET /api/status
Kita akan membuat endpoint pemeriksaan kesehatan (health-check) sederhana yang mengembalikan status koneksi klien Baileys saat ini. Ini menyediakan cara untuk memantau kesehatan bot secara eksternal.


Bab 18: Menangani Webhook Masuk (Menutup Lingkaran)


Alur Komunikasi Dua Arah
Untuk melengkapi arsitektur, kita akan mendorong pesan WhatsApp yang masuk ke layanan eksternal. Ini mengubah bot kita dari sistem yang terisolasi menjadi jembatan komunikasi.
Implementasi
Di dalam penangan peristiwa messages.upsert Baileys (di services/whatsapp.js), setelah mem-parsing pesan yang masuk, kita akan menggunakan instans Axios kita untuk membuat permintaan POST ke URL webhook yang dapat dikonfigurasi. Badan dari permintaan Axios ini akan berisi payload JSON terstruktur dengan detail pesan (pengirim, konten, jenis, stempel waktu). Langkah terakhir ini menunjukkan sinergi yang kuat dari seluruh tumpukan teknologi, memungkinkan integrasi tanpa batas dengan sistem lain.


Kesimpulan


Panduan ini telah memberikan dokumentasi yang komprehensif untuk empat pustaka Node.js yang berbeda—Baileys, Express, Axios, dan qrcode-terminal—dan menunjukkan bagaimana mereka dapat diintegrasikan untuk menciptakan aplikasi bot WhatsApp yang canggih dan digerakkan oleh API.
Analisis ini menghasilkan beberapa kesimpulan utama:
      1. Kekuatan dan Kerapuhan: Kombinasi Express dan Baileys menawarkan fleksibilitas dan kekuatan otomasi yang tak tertandingi tanpa biaya API Bisnis WhatsApp resmi. Namun, kekuatan ini datang dengan harga kerapuhan yang signifikan karena sifat Baileys yang tidak resmi dan volatilitas protokol WhatsApp. Solusi ini paling cocok untuk aplikasi di mana keandalan 100% bukanlah persyaratan mutlak.
      2. Pentingnya Arsitektur yang Baik: Aplikasi yang sukses dengan tumpukan ini bergantung pada arsitektur yang solid yang memisahkan tanggung jawab dengan jelas. Express menangani API, Baileys menangani komunikasi WebSocket, dan Axios menangani interaksi eksternal. Memahami dan mengimplementasikan pemisahan ini sangat penting untuk skalabilitas dan pemeliharaan.
      3. Persistensi adalah Kunci: Untuk aplikasi apa pun di luar prototipe sederhana, persistensi sesi otentikasi yang andal bukanlah pilihan, melainkan keharusan. Pengembang harus merencanakan untuk beralih dari solusi berbasis file default ke mekanisme penyimpanan yang lebih kuat seperti basis data untuk penggunaan produksi.
      4. Pengembangan Berbasis Peristiwa adalah Fundamental: Inti dari interaksi bot adalah sifatnya yang berbasis peristiwa. Penguasaan penanganan peristiwa Baileys, terutama connection.update, creds.update, dan messages.upsert, adalah keterampilan yang paling penting untuk membangun bot yang stabil dan responsif.
Dengan mengikuti panduan, contoh kode, dan pertimbangan arsitektural yang diuraikan dalam laporan ini, pengembang dapat dengan percaya diri membangun, menyebarkan, dan memelihara aplikasi WhatsApp Node.js yang kuat, sambil sepenuhnya menyadari baik kemampuan maupun keterbatasan dari teknologi yang mereka gunakan.
Karya yang dikutip
      1. Express.js Tutorial - GeeksforGeeks, diakses Agustus 13, 2025, https://www.geeksforgeeks.org/node-js/express-js/
      2. Express - Node.js web application framework, diakses Agustus 13, 2025, https://expressjs.com/
      3. Introduction | Baileys, diakses Agustus 13, 2025, https://baileys.wiki/docs/intro
      4. baileys - npm, diakses Agustus 13, 2025, https://www.npmjs.com/package/baileys
      5. WhiskeySockets/Baileys: Lightweight full-featured typescript/javascript WhatsApp Web API - GitHub, diakses Agustus 13, 2025, https://github.com/WhiskeySockets/Baileys
      6. Axios NPM (How It Works For Developers) - IronPDF, diakses Agustus 13, 2025, https://ironpdf.com/nodejs/blog/node-help/axios-npm/
      7. Getting Started | Axios Docs, diakses Agustus 13, 2025, https://axios-http.com/docs/intro
      8. How To Use Axios NPM to Generate HTTP Requests ? - GeeksforGeeks, diakses Agustus 13, 2025, https://www.geeksforgeeks.org/node-js/how-to-use-axios-npm-to-generate-http-requests/
      9. qrcode-terminal - npm, diakses Agustus 13, 2025, https://www.npmjs.com/package/qrcode-terminal
      10. How I Built a WhatsApp Bot using Node.js | by Razan - Medium, diakses Agustus 13, 2025, https://medium.com/@zaidyoutub0/building-whatsapp-bots-with-baileys-a-lazy-developers-guide-to-doing-it-right-c65971290bc3
      11. Automating WhatsApp with Node.js and Baileys: Send, Receive, and ..., diakses Agustus 13, 2025, https://medium.com/@elvisbrazil/automating-whatsapp-with-node-js-and-baileys-send-receive-and-broadcast-messages-with-code-0656c40bd928
      12. nizarfadlan/baileys-api: Simple WhatsApp REST API with multiple device support - GitHub, diakses Agustus 13, 2025, https://github.com/nizarfadlan/baileys-api
      13. baileysjs - NPM, diakses Agustus 13, 2025, https://www.npmjs.com/package/baileysjs
      14. @fizzxydev/baileys-pro - npm, diakses Agustus 13, 2025, https://www.npmjs.com/package/@fizzxydev/baileys-pro
      15. andresayac/bot-wa-baileys - GitHub, diakses Agustus 13, 2025, https://github.com/andresayac/bot-wa-baileys
      16. bot-wa/bot-wa-baileys - NPM, diakses Agustus 13, 2025, https://www.npmjs.com/package/%40bot-wa%2Fbot-wa-baileys
      17. Baileys Provider - BuilderBot.app Chatbot for Whatsapp, Telegram and more, diakses Agustus 13, 2025, https://www.builderbot.app/providers/baileys
      18. reinaldocoelho/Baileys-whatsapp-api: Lightweight full-featured WhatsApp Web + Multi-Device API - GitHub, diakses Agustus 13, 2025, https://github.com/reinaldocoelho/Baileys-whatsapp-api
      19. Handling Messages | Baileys, diakses Agustus 13, 2025, https://baileys.wiki/docs/socket/handling-messages
      20. whatsapp-api-nodejs - Postman, diakses Agustus 13, 2025, https://documenter.getpostman.com/view/12514774/UVsPQkBq
      21. expressjs/express: Fast, unopinionated, minimalist web framework for node. - GitHub, diakses Agustus 13, 2025, https://github.com/expressjs/express
      22. Hello world example - Express.js, diakses Agustus 13, 2025, https://expressjs.com/en/starter/hello-world.html
      23. Routing - Express.js, diakses Agustus 13, 2025, https://expressjs.com/en/guide/routing.html
      24. Express/Node introduction - Learn web development | MDN, diakses Agustus 13, 2025, https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Express_Nodejs/Introduction
      25. Express.js Hello World Example - Tutorialspoint, diakses Agustus 13, 2025, https://www.tutorialspoint.com/expressjs/expressjs_hello_world.htm
      26. Print hello world using Express JS - GeeksforGeeks, diakses Agustus 13, 2025, https://www.geeksforgeeks.org/node-js/print-hello-world-using-express-js/
      27. Node.js First Application - Tutorialspoint, diakses Agustus 13, 2025, https://www.tutorialspoint.com/nodejs/nodejs_first_application.htm
      28. Express - DevDocs API Documentation, diakses Agustus 13, 2025, https://devdocs.io/express/
      29. How to Install Axios npm in Terminal? - GeeksforGeeks, diakses Agustus 13, 2025, https://www.geeksforgeeks.org/node-js/how-to-install-axios-npm-in-terminal/
      30. Axios - NPM, diakses Agustus 13, 2025, https://www.npmjs.com/package/axios
      31. Axios GET and POST examples - DeadSimpleChat, diakses Agustus 13, 2025, https://deadsimplechat.com/blog/axios-get-and-post-examples/
      32. Your First API Call: GET Requests in Typescript using Axios | by Daniel Wilkinson | Medium, diakses Agustus 13, 2025, https://dpw-developer.medium.com/your-first-api-call-get-requests-in-typescript-using-axios-b374be0479b6
      33. How to make an Axios GET request - Educative.io, diakses Agustus 13, 2025, https://www.educative.io/answers/how-to-make-an-axios-get-request
      34. Making HTTP requests with Axios - CircleCI, diakses Agustus 13, 2025, https://circleci.com/blog/making-http-requests-with-axios/
      35. How to Make GET call to an API using Axios in JavaScript? - GeeksforGeeks, diakses Agustus 13, 2025, https://www.geeksforgeeks.org/javascript/how-to-make-get-call-to-an-api-using-axios-in-javascript/
      36. How to Make Axios GET Request Easily - Apidog, diakses Agustus 13, 2025, https://apidog.com/articles/make-axios-get-request/
      37. How to Send Axios PUT Request - Apidog, diakses Agustus 13, 2025, https://apidog.com/articles/axios-put-request/
      38. Axios put request with path variable [duplicate] - Stack Overflow, diakses Agustus 13, 2025, https://stackoverflow.com/questions/71521723/axios-put-request-with-path-variable
      39. Axios - HTTP PUT Request Examples | Jason Watmore's Blog, diakses Agustus 13, 2025, https://jasonwatmore.com/post/2021/08/24/axios-http-put-request-examples
      40. Sending PUT HTTP Requests with Axios - Stack Abuse, diakses Agustus 13, 2025, https://stackabuse.com/how-to-make-put-http-request-with-axios/
      41. Axios PUT request -React - Stack Overflow, diakses Agustus 13, 2025, https://stackoverflow.com/questions/71647940/axios-put-request-react
      42. How to Make DELETE Requests with Axios - Apidog, diakses Agustus 13, 2025, https://apidog.com/articles/make-axios-delete-requests/
      43. Axios - HTTP DELETE Request Examples | Jason Watmore's Blog, diakses Agustus 13, 2025, https://jasonwatmore.com/post/2021/08/25/axios-http-delete-request-examples
      44. How can I delete data using react and axios? - Stack Overflow, diakses Agustus 13, 2025, https://stackoverflow.com/questions/73935335/how-can-i-delete-data-using-react-and-axios
      45. javascript - Axios - DELETE Request With Request Body and Headers? - Stack Overflow, diakses Agustus 13, 2025, https://stackoverflow.com/questions/51069552/axios-delete-request-with-request-body-and-headers
      46. How to make DELETE requests with Axios? - RapidAPI, diakses Agustus 13, 2025, https://rapidapi.com/guides/delete-requests-axios